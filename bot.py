import os
import asyncio
import random
from telethon import TelegramClient
from telethon.tl.functions.channels import (
    CreateForumTopicRequest,
    GetForumTopicsRequest
)
from telethon.tl.types import UpdateNewChannelMessage
from telethon.errors import RPCError, FloodWaitError
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
api_id              = int(os.getenv("API_ID"))
api_hash            = os.getenv("API_HASH")
phone               = os.getenv("PHONE")
source_channel_id   = int(os.getenv("SOURCE_CHANNEL_ID"))
post_id             = int(os.getenv("POST_ID"))
target_channel_id   = int(os.getenv("TARGET_CHANNEL_ID"))
ICON_EMOJI_ID       = int(os.getenv("ICON_EMOJI_ID"))

async def load_forum_topics(client, channel, limit=100):
    res = await client(GetForumTopicsRequest(
        channel=channel,
        offset_date=0,
        offset_id=0,
        offset_topic=0,
        limit=limit
    ))
    topics = {}
    for t in res.topics:
        top = t.top_message
        sid = top if isinstance(top, int) else top.id
        topics[t.title.strip()] = sid
    return topics

async def main():
    client = TelegramClient('session', api_id, api_hash)
    await client.start(phone)
    print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞.")

    source = await client.get_entity(source_channel_id)
    target = await client.get_entity(target_channel_id)

    try:
        existing = await load_forum_topics(client, target, limit=100)
        print(f"üìã –¢–µ–º –Ω–∞–π–¥–µ–Ω–æ: {len(existing)}")
    except RPCError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–º: {e}")
        return

    current_id = post_id
    missing_count = 0
    max_missing = 2000

    while True:
        msg = await client.get_messages(source, ids=current_id)
        if not msg:
            print(f"‚ö†Ô∏è –ü–æ—Å—Ç #{current_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            missing_count += 1
            if missing_count >= max_missing:
                print("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–¥—Ä—è–¥ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤, –∑–∞–≤–µ—Ä—à–∞–µ–º.")
                break
            current_id += 1
            continue

        missing_count = 0

        text = msg.text or ""
        lines = text.split('\n')
        topic_title = lines[1].strip() if len(lines) >= 2 and lines[1].strip() else f"–ü–æ—Å—Ç #{current_id}"

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –≤—ã–±–æ—Ä —Ç–µ–º—ã
        if topic_title in existing:
            service_msg_id = existing[topic_title]
            print(f"‚ö†Ô∏è –¢–µ–º–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ¬´{topic_title}¬ª")
        else:
            try:
                result = await client(CreateForumTopicRequest(
                    channel=target,
                    title=topic_title,
                    icon_emoji_id=ICON_EMOJI_ID
                ))
                service_msg_id = None
                for upd in result.updates:
                    if isinstance(upd, UpdateNewChannelMessage):
                        service_msg_id = upd.message.id
                        break
                if service_msg_id is None:
                    existing = await load_forum_topics(client, target)
                    service_msg_id = existing.get(topic_title)
                if service_msg_id is None:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å service_msg_id —Ç–µ–º—ã ¬´{topic_title}¬ª")
                    current_id += 1
                    continue
                existing[topic_title] = service_msg_id
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ–º–∞ ¬´{topic_title}¬ª")
            except RPCError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º—ã: {e}")
                current_id += 1
                continue

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–¥–∏–∞-–ø–æ—Å—Ç–∞
        if msg.photo or msg.video:
            try:
                await client.send_file(
                    entity=target,
                    file=msg.media,
                    caption=text,
                    reply_to=service_msg_id
                )
                print(f"üìå –û—Å–Ω–æ–≤–Ω–æ–π –º–µ–¥–∏–∞-–ø–æ—Å—Ç #{msg.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
                await asyncio.sleep(random.uniform(15, 20))
            except FloodWaitError as e:
                print(f"‚è≥ FloodWait {e.seconds}s ‚Äî –∂–¥—ë–º")
                await asyncio.sleep(e.seconds)
                await client.send_file(
                    entity=target,
                    file=msg.media,
                    caption=text,
                    reply_to=service_msg_id
                )
                await asyncio.sleep(random.uniform(15, 20))
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–¥–∏–∞-–ø–æ—Å—Ç–∞: {e}")
        else:
            print(f"‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Å—Ç #{msg.id} ‚Äî –Ω–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ.")

        # –°–±–æ—Ä –º–µ–¥–∏–∞ –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        media_files = []
        async for reply in client.iter_messages(source, reply_to=msg.id, reverse=True):
            if reply.photo or reply.video:
                media_files.append((reply.media, reply.text))
            else:
                print(f"‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π #{reply.id} ‚Äî –Ω–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ.")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª—å–±–æ–º–∞–º–∏ –ø–æ 10 —Ñ–∞–π–ª–æ–≤
        chunk_size = 10
        for i in range(0, len(media_files), chunk_size):
            chunk = media_files[i:i+chunk_size]
            files = [m[0] for m in chunk]
            caption = next((m[1] for m in chunk if m[1]), None)
            try:
                await client.send_file(
                    entity=target,
                    file=files,
                    caption=caption,
                    reply_to=service_msg_id
                )
                print(f"üì§ –ê–ª—å–±–æ–º –∏–∑ {len(files)} –º–µ–¥–∏–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
                await asyncio.sleep(random.uniform(15, 20))
            except FloodWaitError as e:
                print(f"‚è≥ FloodWait {e.seconds}s ‚Äî –∂–¥—ë–º")
                await asyncio.sleep(e.seconds)
                await client.send_file(
                    entity=target,
                    file=files,
                    caption=caption,
                    reply_to=service_msg_id
                )
                await asyncio.sleep(random.uniform(15, 20))
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª—å–±–æ–º–∞: {e}")

        # –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –º–µ–¥–∏–∞ ‚Äî –∑–∞–≥–ª—É—à–∫–∞
        if not media_files:
            print("‚ö†Ô∏è –ù–µ—Ç –º–µ–¥–∏–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É.")
            try:
                await client.send_message(
                    entity=target,
                    message="–ö–æ–Ω—Ç–µ–Ω—Ç —É—Ç–µ—Ä—è–Ω, –ø—ã—Ç–∞—é—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.",
                    reply_to=service_msg_id
                )
                await asyncio.sleep(random.uniform(15, 20))
            except FloodWaitError as e:
                print(f"‚è≥ FloodWait {e.seconds}s ‚Äî –∂–¥—ë–º")
                await asyncio.sleep(e.seconds)
                await client.send_message(
                    entity=target,
                    message="–ö–æ–Ω—Ç–µ–Ω—Ç —É—Ç–µ—Ä—è–Ω, –ø—ã—Ç–∞—é—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.",
                    reply_to=service_msg_id
                )
                await asyncio.sleep(random.uniform(15, 20))
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–≥–ª—É—à–∫–∏: {e}")

        current_id += 1

    print("‚úÖ –í—Å–µ –ø–æ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")
    await client.disconnect()

if __name__ == '__main__':
    asyncio.run(main())
